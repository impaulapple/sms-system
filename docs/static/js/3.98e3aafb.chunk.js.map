{"version":3,"sources":["modules/SMS_Module/TabPanel.js","modules/SMS_Module/DataSource.js","modules/SMS_Module/index.js"],"names":["TabPanel","children","value","index","other","role","hidden","id","aria-labelledby","Box","p","theme","createTheme","overrides","MuiTabs","scrollButtonsDesktop","backgroundColor","MuiTab","wrapper","textTransform","MuiOutlinedInput","inputMarginDense","padding","DataSource","t","useTranslation","React","useState","paramValue","setValue","paramEditingCaption","setEditingCaption","caption","isEdit","content","paramDataSourceList","setDataSourceList","updateTabNameFunc","e","sNowId","target","validIsEmpty","parentElement","aNewList","slice","i","iL","length","parseInt","editTabCaptionFunc","saveCaptionFunc","charCode","type","sNewCaption","ThemeProvider","sx","width","bgcolor","Tabs","onChange","event","newValue","variant","scrollButtons","map","obj","Tab","icon","TextField","hiddenLabel","autoFocus","style","toString","size","onBlur","onKeyPress","label","onDoubleClick","minWidth","background","onClick","iMaxId","Math","max","apply","o","push","useStyles","makeStyles","root","flexGrow","palette","paper","display","height","tabs","borderRight","divider","test","SMSPage","classes","aTabList","component","className","orientation","aria-label","componentsprops","indicator"],"mappings":"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","file":"static/js/3.98e3aafb.chunk.js","sourcesContent":["import { Box } from \"@material-ui/core\";\r\nimport React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst TabPanel = ({ children, value, index, ...other }) => {\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`vertical-tabpanel-${index}`}\r\n            aria-labelledby={`vertical-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box p={3}>\r\n                    {children}\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TabPanel;","import { Box, Tabs, Tab, TextField } from \"@material-ui/core\";\r\nimport React from 'react';\r\nimport TabPanel from \"./TabPanel\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport { createTheme, ThemeProvider } from '@material-ui/core/styles';\r\nimport { validIsEmpty } from \"../../api/Validator\";\r\n\r\nconst theme = createTheme({\r\n    overrides: {\r\n        MuiTabs: {\r\n            scrollButtonsDesktop: {\r\n                backgroundColor: 'rgb(0 0 0 / 13%)'\r\n            }\r\n        },\r\n        MuiTab: {\r\n            wrapper: {\r\n                textTransform: \"none\"\r\n            }\r\n        },\r\n        MuiOutlinedInput: {\r\n            inputMarginDense: {\r\n                padding: \"6px 10.5px !important\"\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nconst DataSource = () => {\r\n\r\n    const { t } = useTranslation();\r\n\r\n    const [paramValue, setValue] = React.useState(0);\r\n    const [paramEditingCaption, setEditingCaption] = React.useState(\"\");\r\n\r\n    const [paramDataSourceList, setDataSourceList] = React.useState([\r\n        {\r\n            id: 123,\r\n            caption: 'newTable',\r\n            isEdit: false,\r\n            content: null\r\n        },\r\n        {\r\n            id: 124,\r\n            caption: 'test2',\r\n            isEdit: false,\r\n            content: null\r\n        }\r\n    ]);\r\n\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const updateTabNameFunc = (e) => {\r\n        let sNowId = e.target.id;\r\n        if (validIsEmpty(sNowId)) sNowId = e.target.parentElement.id\r\n        if (validIsEmpty(sNowId)) return;\r\n\r\n        let aNewList = paramDataSourceList.slice();\r\n        for (let i = 0, iL = aNewList.length; i < iL; i++) {\r\n            if (aNewList[i].id === parseInt(sNowId)) {\r\n                aNewList[i].isEdit = true;\r\n                setEditingCaption(aNewList[i].caption);\r\n                break;\r\n            }\r\n        }\r\n        setDataSourceList(aNewList);\r\n    }\r\n\r\n    const editTabCaptionFunc = (e) => {\r\n        setEditingCaption(e.target.value);\r\n    }\r\n\r\n    const saveCaptionFunc = (e) => {\r\n        if (e.charCode !== 13 && e.type !== \"blur\") return;\r\n        let sNewCaption = e.target.value;\r\n        let sNowId = e.target.id;\r\n\r\n        let aNewList = paramDataSourceList.slice();\r\n        for (let i = 0, iL = aNewList.length; i < iL; i++) {\r\n            if (aNewList[i].id === parseInt(sNowId)) {\r\n                aNewList[i].isEdit = false;\r\n                aNewList[i].caption = sNewCaption;\r\n                break;\r\n            }\r\n        }\r\n        setDataSourceList(aNewList);\r\n    }\r\n\r\n    const addNewDataSourceFunc = (e) => {\r\n\r\n        let aNewList = paramDataSourceList.slice();\r\n        let iMaxId = Math.max.apply(null, aNewList.map(o => o.id));\r\n\r\n        aNewList.push({\r\n            id: ++iMaxId,\r\n            caption: t('newTable') + (aNewList.length + 1),\r\n            isEdit: false\r\n        });\r\n\r\n        setDataSourceList(aNewList);\r\n    }\r\n    const handleInputChange = (event) => {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <Box sx={{ width: \"80%\", bgcolor: 'background.paper' }}>\r\n                <Tabs\r\n                    value={paramValue}\r\n                    onChange={handleChange}\r\n                    variant=\"scrollable\"\r\n                    scrollButtons=\"auto\"\r\n                >\r\n                    {paramDataSourceList.map((obj, i) => {\r\n                        if (obj.isEdit)\r\n                            return (\r\n                                <Tab key={i} id={obj.id} icon={<TextField\r\n                                    hiddenLabel\r\n                                    autoFocus\r\n                                    style={{ width: 130 }}\r\n                                    id={obj.id.toString()}\r\n                                    variant=\"outlined\"\r\n                                    size=\"small\"\r\n                                    value={paramEditingCaption}\r\n                                    onBlur={saveCaptionFunc}\r\n                                    onKeyPress={saveCaptionFunc}\r\n                                    onChange={editTabCaptionFunc}\r\n                                />}\r\n                                />)\r\n                        else\r\n                            return (<Tab key={i} id={obj.id} label={obj.caption} onDoubleClick={updateTabNameFunc} />)\r\n                    })}\r\n\r\n                    <Tab label={\"✚\"} style={{ minWidth: \"48px\", background: \"#c3bfbf\" }} onClick={addNewDataSourceFunc} />\r\n\r\n                </Tabs>\r\n\r\n                {paramDataSourceList.map((obj, i) => {\r\n                    return (\r\n                        <TabPanel style={{ width: \"100%\" }} key={i} value={paramValue} index={i}>\r\n                            {obj.content}\r\n                        </TabPanel>\r\n                    )\r\n                })}\r\n\r\n            </Box>\r\n        </ThemeProvider >\r\n    );\r\n}\r\n\r\nexport default DataSource;","import { Tabs, Tab, } from \"@material-ui/core\";\r\nimport React from 'react';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport './Indicator.css';\r\nimport TabPanel from \"./TabPanel\";\r\nimport DataSource from \"./DataSource\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport DashboardIcon from '@material-ui/icons/Dashboard';\r\nimport EjectIcon from '@material-ui/icons/Eject';\r\nimport MenuBookIcon from '@material-ui/icons/MenuBook';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        backgroundColor: theme.palette.background.paper,\r\n        display: 'flex',\r\n        height: '100%',\r\n    },\r\n    tabs: {\r\n        borderRight: `1px solid ${theme.palette.divider}`,\r\n    },\r\n    test: {\r\n        width: '50px !important'\r\n    }\r\n}));\r\n\r\n\r\n\r\nconst SMSPage = () => {\r\n    const { t } = useTranslation();\r\n    const classes = useStyles();\r\n\r\n    const aTabList = [\r\n        {\r\n            caption: t('setting'),\r\n            component: <DashboardIcon />\r\n        },\r\n        {\r\n            caption: t('dataSrouce'),\r\n            component: <DataSource />\r\n        },\r\n        {\r\n            caption: t('smsTool'),\r\n            component: <EjectIcon />\r\n        },\r\n        {\r\n            caption: t('smsScheduler'),\r\n            component: <MenuBookIcon />\r\n        },\r\n    ];\r\n\r\n    const [paramValue, setValue] = React.useState(1);\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const a11yProps = (index) => {\r\n        return {\r\n            id: `vertical-tab-${index}`,\r\n            'aria-controls': `vertical-tabpanel-${index}`,\r\n        };\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Tabs\r\n                orientation=\"vertical\"\r\n                variant=\"scrollable\"\r\n                value={paramValue}\r\n                onChange={handleChange}\r\n                aria-label=\"Vertical tabs example\"\r\n                className={classes.tabs}\r\n                componentsprops={{ indicator: { className: 'Indicator' } }}\r\n            >\r\n                {aTabList.map((obj, i) => {\r\n                    return (<Tab key={i} label={obj.caption} {...a11yProps(i)} />)\r\n                })}\r\n\r\n            </Tabs>\r\n\r\n\r\n            {aTabList.map((obj, i) => {\r\n                return (\r\n                    <TabPanel style={{width:\"100%\"}} key={i} value={paramValue} index={i}>\r\n                        {obj.component}\r\n                    </TabPanel>\r\n                )\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SMSPage;"],"sourceRoot":""}